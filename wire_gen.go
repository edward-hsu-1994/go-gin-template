// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"go-fiber-template/accesses"
	"go-fiber-template/routes"
	"go-fiber-template/services"
)

import (
	_ "go-fiber-template/docs"
)

// Injectors from wire.go:

func InitializeApp() (*gin.Engine, error) {
	v, err := GinConfig()
	if err != nil {
		return nil, err
	}
	engine := gin.Default(v...)
	return engine, nil
}

func InitialGinRouters() ([]routes.GinRouter, error) {
	newsRouter := routes.NewNewsRouter()
	postRepository := accesses.NewMockPostRepository()
	postService := services.NewPostService(postRepository)
	postRouter := routes.NewPostRouter(postService)
	v := AssembleGinRouters(newsRouter, postRouter)
	return v, nil
}

// wire.go:

func GinConfig() ([]gin.OptionFunc, error) {
	return []gin.OptionFunc{}, nil
}

var repoSet = wire.NewSet(accesses.NewMockPostRepository)

var serviceSet = wire.NewSet(services.NewPostService)

var routesSet = wire.NewSet(routes.NewNewsRouter, routes.NewPostRouter, AssembleGinRouters)

func AssembleGinRouters(
	newsRouter *routes.NewsRouter,
	postRouter *routes.PostRouter,
) []routes.GinRouter {
	return []routes.GinRouter{newsRouter, postRouter}
}
